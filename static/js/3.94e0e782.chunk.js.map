{"version":3,"sources":["components/contactList/ContactList.jsx","components/contactForm/ContactForm.jsx","views/ContactsView.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/contactList/ContactList.module.css","components/contactForm/ContactForm.module.css"],"names":["ContactList","contacts","useSelector","getFilteredContacts","dispatch","useDispatch","className","s","list","map","id","name","number","item","type","onClick","deleteContact","btn","ContactForm","useState","setName","setNumber","handleChange","e","target","value","state","onSubmit","preventDefault","createContact","form","label","input","onChange","pattern","title","required","ContactsView","isLoggedIn","getLogIn","useEffect","fetchAllContacts","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError","module","exports"],"mappings":"iNA8BeA,MAzBf,WACE,IAAMC,EAAWC,YAAYC,KAEvBC,EAAWC,cAEjB,OACE,oBAAIC,UAAWC,IAAEC,KAAjB,SACGP,GACCA,EAASQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACX,qBAAaN,UAAWC,IAAEM,KAA1B,UACGF,EADH,KACWC,EACT,wBACE,UAASF,EACTI,KAAK,SACLC,QAAS,kBAAMX,EAASY,YAAcN,KACtCJ,UAAWC,IAAEU,IAJf,sBAFOP,S,yBCTJ,SAASQ,IACtB,IAAMd,EAAWC,cACjB,EAAwBc,mBAAS,IAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOP,EAAP,KAAeS,EAAf,KAaMC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlBb,EAAR,EAAQA,KAAMc,EAAd,EAAcA,MACd,OAAQd,GACN,IAAK,OACHS,GAAQ,SAACM,GAAD,OAAWD,KACnB,MACF,IAAK,SACHJ,GAAU,SAACK,GAAD,OAAWD,KACrB,MAEF,QACE,SAIN,OACE,mCACE,uBAAME,SAvBW,SAACJ,GACpBA,EAAEK,iBACFxB,EAASyB,YAAc,CAAElB,OAAMC,YAN/BQ,GAAQ,SAACM,GAAD,MAAW,MACnBL,GAAU,SAACK,GAAD,MAAW,OA0BWpB,UAAWC,IAAEuB,KAA3C,UACE,wBAAOxB,UAAWC,IAAEwB,MAApB,iBAEE,uBACEzB,UAAWC,IAAEyB,MACbrB,KAAK,OACLc,MAAOd,EACPsB,SAAUX,EACVR,KAAK,OACLoB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,wBAAO9B,UAAWC,IAAEwB,MAApB,mBAEE,uBACEzB,UAAWC,IAAEyB,MACbrB,KAAK,SACLc,MAAOb,EACPqB,SAAUX,EACVR,KAAK,MACLoB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQtB,KAAK,SAASR,UAAWC,IAAEU,IAAnC,8BCtCOoB,UAlBf,WACE,IAAMjC,EAAWC,cACXiC,EAAapC,YAAYqC,KAI/B,OAFAC,qBAAU,kBAAMpC,EAASqC,iBAAqB,CAACrC,IAG7C,mCACGkC,GACC,qCACE,cAACpB,EAAD,IACA,cAAC,EAAD,W,8EChBK,SAASwB,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAG9B,QAETmB,GAAKM,EAAKU,SAAWhB,GAH8CO,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAkB,EAAA,GAA2BnB,EAAKC,IGLjF,WACb,MAAM,IAAImB,UAAU,6IHIgF,K,mBIJtGC,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,2B,mBCA1FD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,IAAM","file":"static/js/3.94e0e782.chunk.js","sourcesContent":["import { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/slices/contacts\";\nimport { getFilteredContacts } from \"../../redux/selector/selectors\";\nimport s from \"./ContactList.module.css\";\n\nfunction ContactList() {\n  const contacts = useSelector(getFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.list}>\n      {contacts &&\n        contacts.map(({ id, name, number }) => (\n          <li key={id} className={s.item}>\n            {name}: {number}\n            <button\n              data-id={id}\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n              className={s.btn}\n            >\n              &#10060;\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { createContact } from \"../../redux/slices/contacts\";\nimport s from \"./ContactForm.module.css\";\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const reset = () => {\n    setName((state) => \"\");\n    setNumber((state) => \"\");\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(createContact({ name, number }));\n    reset();\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case \"name\":\n        setName((state) => value);\n        break;\n      case \"number\":\n        setNumber((state) => value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={s.form}>\n        <label className={s.label}>\n          Name\n          <input\n            className={s.input}\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            type=\"text\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={s.label}>\n          Number\n          <input\n            className={s.input}\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            type=\"tel\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className={s.btn}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { getLogIn } from \"../redux/selector/selectors\";\nimport { fetchAllContacts } from \"../redux/slices/contacts\";\n\nimport ContactList from \"../components/contactList/ContactList\";\nimport ContactForm from \"../components/contactForm/ContactForm\";\n\nfunction ContactsView() {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(getLogIn);\n\n  useEffect(() => dispatch(fetchAllContacts()), [dispatch]);\n\n  return (\n    <>\n      {isLoggedIn && (\n        <>\n          <ContactForm />\n          <ContactList />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default ContactsView;\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2K4PC\",\"item\":\"ContactList_item__3_vMR\",\"btn\":\"ContactList_btn__2LqVP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2IUqW\",\"label\":\"ContactForm_label__3cSwc\",\"input\":\"ContactForm_input__2u7Lv\",\"btn\":\"ContactForm_btn__2Kwxa\"};"],"sourceRoot":""}